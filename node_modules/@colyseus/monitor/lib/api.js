"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const express_1 = __importDefault(require("express"));
const UNAVAILABLE_ROOM_ERROR = "@colyseus/monitor: room $roomId is not available anymore.";
function getAPI(server) {
    const api = express_1.default.Router();
    api.get("/", (req, res) => __awaiter(this, void 0, void 0, function* () {
        try {
            const rooms = yield server.matchMaker.driver.find({});
            res.json(rooms.map(room => {
                const data = room.toJSON();
                data.elapsedTime = Date.now() - new Date(room.createdAt).getTime();
                return data;
            }));
        }
        catch (e) {
            const message = e.message;
            console.error(message);
            res.status(500);
            res.json({ message });
        }
    }));
    api.get("/room", (req, res) => __awaiter(this, void 0, void 0, function* () {
        const roomId = req.query.roomId;
        try {
            const [_, inspectData] = yield server.matchMaker.remoteRoomCall(roomId, "getInspectData");
            res.json(inspectData);
        }
        catch (e) {
            const message = UNAVAILABLE_ROOM_ERROR.replace("$roomId", roomId);
            console.error(message);
            res.status(500);
            res.json({ message });
        }
    }));
    api.get("/room/call", (req, res) => __awaiter(this, void 0, void 0, function* () {
        const roomId = req.query.roomId;
        const method = req.query.method;
        const args = JSON.parse(req.query.args);
        try {
            const [_, data] = yield server.matchMaker.remoteRoomCall(roomId, method, args);
            res.json(data);
        }
        catch (e) {
            const message = UNAVAILABLE_ROOM_ERROR.replace("$roomId", roomId);
            console.error(message);
            res.status(500);
            res.json({ message });
        }
    }));
    return api;
}
exports.getAPI = getAPI;
